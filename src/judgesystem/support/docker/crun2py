#!/usr/bin/python
import lorun
import json
import os
import sys

RESULT_SIG = [
    'OK', # OK
    'PR', # Ingore it
    'TL', # Time Limit
    'ML', # Memory Limit
    'WA', # Wrong Answer
    'RE', # Runtime Error
    'OL', # Output Limit
    'CE', # Ingore it
    'IE'  # Internal Error
]

def check_file_path_exist(files):
    for each in files:
        if not os.path.exists(each):
            return False
    return True

def execute(policy, input_file, output_file, cpu_limit, memory_limit, program_args):
    runcfg = {
        "args" : program_args,
        "fd_in" : input_file.fileno(),
        "fd_out" : output_file.fileno(),
        'timelimit' : cpu_limit,
        'memorylimit' : memory_limit,
    }
    runcfg['trace'] = True
    runcfg['calls'] = policy["calls"]
    runcfg['files'] = policy["files"]
    try:
        rst = lorun.run(runcfg)
    except:
        return {'result' : "IE"}
    rst["result"] = RESULT_SIG[rst["result"]]
    return rst

def main(args):
    # arg[1]: policy.json
    # arg[2]: std-in file
    # arg[3]: cputime limit
    # arg[4]: memory limit
    # arg[5:]: program execute parms
    # sandbox configuration
    if not check_file_path_exist([args[1], args[2]]):
        print json.dumps({"message":"file arguments path not exists", "result":"IE"});
        return os.EX_IOERR
    try:
        args[3] = int(args[3])
        args[4] = int(args[4])
    except:
        print json.dumps({"message":"limit arguments are not int", "result":"IE"});
        return os.EX_OSERR

    policy = json.load(file(args[1]))
    input_file = file(args[2], "r")
    output_file = file("/tmp/tmp_output", "w")
    cpu_limit = args[3]
    memory_limit = args[4]
    program_args = args[5:]
    result = execute(policy, input_file, output_file, cpu_limit, memory_limit, program_args)
    result["message"] = "Program finished running."
    result["stdout"] = file("/tmp/tmp_output", "r").read()
    result["stdin"] = file(args[2], "r").read()

    print json.dumps(result, ensure_ascii=False)

if __name__ == '__main__':
    if(len(sys.argv) >= 6):
        main(sys.argv)
    else:
        print json.dumps({"message":"too few arguments", "result":"IE"})
